---
const currentPath = Astro.url.pathname;

const navItems = [
  { href: '/', label: 'Home' },
  { href: '/about', label: 'About Us' },
  { href: '/services', label: 'Weight Loss Treatment' },
  { href: '/how-it-works', label: 'How It Works' },
  { href: '/faq', label: 'FAQ' },
  { href: '/blog', label: 'Blog' },
];

const isActive = (href: string) => currentPath === href;
---

<header class="fixed top-0 left-0 right-0 z-50 bg-white/95 backdrop-blur-md border-b border-neutral-200 shadow-sm">
  <nav class="container-max px-4 sm:px-6 lg:px-8">
    <div class="flex items-center justify-between h-16 lg:h-20">
      <!-- Logo -->
      <div class="flex items-center">
        <a href="/" class="flex items-center space-x-3">
          <!-- Logo Image -->
          <img 
            src="/images/logos/Vital-Health-Logo.png" 
            alt="Vital Health NZ Logo" 
            class="h-8 w-auto"
            onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
          />
          <!-- Fallback Logo (shows if image fails to load) -->
          <div class="w-8 h-8 bg-primary-600 rounded-lg flex items-center justify-center" style="display: none;">
            <span class="text-white font-bold text-lg">V</span>
          </div>
          <span class="text-xl font-bold text-[#222222]">Vital Health</span>
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden lg:flex items-center space-x-8">
        {navItems.map((item) => (
          <a
            href={item.href}
            class={`text-sm font-medium transition-colors duration-200 ${
              isActive(item.href)
                ? 'text-primary-600 border-b-2 border-primary-600'
                : 'text-neutral-600 hover:text-primary-600'
            }`}
          >
            {item.label}
          </a>
        ))}
      </div>

      <!-- CTA Button -->
      <div class="hidden lg:block">
        <a href="/contact" class="btn-primary">
          Book Consultation
        </a>
      </div>

      <!-- Mobile menu button -->
      <button
        id="mobile-menu-button"
        class="lg:hidden p-2 rounded-md text-neutral-600 hover:text-primary-600 hover:bg-neutral-100 transition-colors duration-200"
        aria-label="Toggle mobile menu"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
    </div>

    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="lg:hidden hidden bg-white border-t border-neutral-200">
      <div class="px-2 pt-2 pb-3 space-y-1">
        {navItems.map((item) => (
          <a
            href={item.href}
            class={`block px-3 py-2 rounded-md text-base font-medium transition-colors duration-200 ${
              isActive(item.href)
                ? 'text-primary-600 bg-primary-50'
                : 'text-neutral-600 hover:text-primary-600 hover:bg-neutral-50'
            }`}
          >
            {item.label}
          </a>
        ))}
        <div class="pt-4">
          <a href="/contact" class="btn-primary w-full text-center block">
            Book Consultation
          </a>
        </div>
      </div>
    </div>
  </nav>
</header>

<!-- Spacer for fixed header -->
<div class="h-16 lg:h-20"></div>

<script>
  // Mobile menu toggle
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');

  if (mobileMenuButton && mobileMenu) {
    mobileMenuButton.addEventListener('click', () => {
      const isHidden = mobileMenu.classList.contains('hidden');
      mobileMenu.classList.toggle('hidden', !isHidden);
      
      // Update button icon
      const svg = mobileMenuButton.querySelector('svg');
      if (svg) {
        if (isHidden) {
          svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>';
        } else {
          svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>';
        }
      }
    });

    // Close mobile menu when clicking outside
    document.addEventListener('click', (e) => {
      if (!mobileMenuButton?.contains(e.target as Node) && !mobileMenu?.contains(e.target as Node)) {
        mobileMenu.classList.add('hidden');
        const svg = mobileMenuButton?.querySelector('svg');
        if (svg) {
          svg.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>';
        }
      }
    });
  }
</script>
